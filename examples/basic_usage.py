"""
Basic usage example for the AI Multi-Agent Note Taking System

This example shows how to use the system for simple note generation.
"""

import asyncio
import logging
import sys
from pathlib import Path

# Add the src directory to the Python path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from core.system import MultiAgentSystem
from utils.helpers import ensure_directory_exists
from config.settings import get_settings, setup_logging


async def basic_example():
    """Basic example of generating notes on a topic"""
    
    print("="*50)
    print("AI Multi-Agent Note Taking System - Basic Example")
    print("="*50)
    
    # Setup logging
    logging.basicConfig(level=logging.INFO)
    
    # Ensure directories exist
    ensure_directory_exists("documents")
    ensure_directory_exists("records")
    
    # Create the multi-agent system
    print("\n1. Initializing the system...")
    system = MultiAgentSystem(
        documents_folder="documents",
        model_name="Qwen/Qwen3-1.7B"
    )
    
    # Get document statistics
    stats = system.get_document_stats()
    print(f"   - Loaded {stats['total_documents']} document chunks")
    print(f"   - Vector index built: {stats['index_built']}")
    
    # Define the topic and requirements
    topic = "Machine Learning Fundamentals"
    requirements = {
        "depth": "intermediate",
        "include_examples": True,
        "format": "structured",
        "audience": "students"
    }
    
    print(f"\n2. Generating notes on topic: '{topic}'")
    print("   This may take a few minutes...")
    
    try:
        # Generate notes
        final_notes = await system.create_notes(topic, requirements)
        
        if final_notes and not final_notes.startswith("Note generation failed"):
            print("\n3. Notes generated successfully!")
            
            # Save notes to file
            output_file = f"generated_notes_{topic.replace(' ', '_').lower()}.md"
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(f"# {topic}\n\n")
                f.write("Generated by AI Multi-Agent Note Taking System\n\n")
                f.write(final_notes)
            
            print(f"   - Notes saved to: {output_file}")
            print(f"   - Length: {len(final_notes)} characters")
            
            # Show preview
            preview = final_notes[:300] + "..." if len(final_notes) > 300 else final_notes
            print(f"\n4. Preview:\n{preview}")
            
        else:
            print(f"\n❌ Note generation failed: {final_notes}")
    
    except Exception as e:
        print(f"\n❌ Error during note generation: {e}")
    
    finally:
        # Clean shutdown
        system.shutdown()
        print("\n5. System shutdown complete.")


def main():
    """Main function to run the basic example"""
    try:
        asyncio.run(basic_example())
    except KeyboardInterrupt:
        print("\n\n⚠️  Process interrupted by user")
    except Exception as e:
        print(f"\n❌ Unexpected error: {e}")


if __name__ == "__main__":
    main()
